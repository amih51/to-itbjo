generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  user
  teacher
  admin
}

enum Type {
  tryout
  drill
}

enum SubtestType {
  pu
  ppu
  pbm
  pk
  pm
  lbe
  lbi
}

enum QuestionType {
  essay
  mulChoice
}

// Models
model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  role          Role           @default(user)
  createdAt     DateTime       @default(now())
  classid       Int?
  class         Class?         @relation(fields: [classid], references: [id])
  accounts      Account[]      
  sessions      Session[]      
  userAnswers   UserAnswer[] 
  quizSession   QuizSession[]
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? 
  access_token             String? 
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? 
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Class {
  id        Int           @id @default(autoincrement())
  name      String
  createdAt DateTime      @default(now())
  users     User[]
  packages  Package[]
}

model Package {
  id          Int          @id @default(autoincrement())
  name        String
  type        Type
  classId     Int
  TOstart     DateTime?
  TOend       DateTime?
  subtests    Subtest[]
  userAnswers UserAnswer[]
  class       Class?       @relation(fields: [classId], references: [id], onDelete: Cascade)
  quizSession QuizSession[]
}

model Subtest {
  id          Int         @id @default(autoincrement())
  type        SubtestType
  packageId   Int
  duration    Int?
  package     Package     @relation(fields: [packageId], references: [id], onDelete: Cascade)
  questions   Question[]
  quizSession QuizSession[]
}

model Question {
  id                  Int           @id @default(autoincrement())
  index               Int
  content             String        
  imageUrl            String?
  type                QuestionType
  score               Int
  explanation         String?
  answers             Answer[]    
  correctAnswerChoice Int?
  packageId           Int
  subtestId           Int         
  subtest             Subtest      @relation(fields: [subtestId], references: [id], onDelete: Cascade)
  userAnswers         UserAnswer[] 
}

model Answer {
  id         Int      @id @default(autoincrement())
  content    String   
  index      Int       
  questionId Int
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model UserAnswer {
  id            Int         @id @default(autoincrement())
  essayAnswer   String?
  answerChoice  Int?      
  questionId    Int
  question      Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  userId        String 
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  packageId     Int
  package       Package     @relation(fields: [packageId], references: [id], onDelete: Cascade)
  quizSessionId Int
  quizSession   QuizSession @relation(fields: [quizSessionId], references: [id], onDelete: Cascade)

  @@unique([userId, quizSessionId, questionId], name: "userId_quizSessionId_questionId")
}

model Video {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  url         String
  createdAt   DateTime @default(now())
}

model Folder {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  files       File[]
}

model File {
  id          Int     @id @default(autoincrement())
  title       String
  description String?
  url         String
  folderId    Int
  folder      Folder  @relation(fields: [folderId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model QuizSession {
  id           Int         @id @default(autoincrement())
  startTime    DateTime    @default(now())
  endTime      DateTime?
  duration     Int
  userId       String   
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  packageId    Int
  package      Package     @relation(fields: [packageId], references: [id], onDelete: Cascade)
  subtestId    Int
  subtest      Subtest     @relation(fields: [subtestId], references: [id], onDelete: Cascade)
  userAnswers  UserAnswer[]
  
  @@unique([userId, subtestId], name: "unique_user_subtest")
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String?
  content     String?  
  url         String?
  createdAt   DateTime @default(now())
}
